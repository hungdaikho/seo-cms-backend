// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  user
  admin
  super_admin
}

enum SubscriptionStatus {
  active
  cancelled
  expired
  trial
  suspended
  pending
}

enum BillingCycle {
  monthly
  yearly
}

enum UsageType {
  projects
  keywords_tracking
  api_requests_daily
  api_requests_monthly
  audits_monthly
  competitors_tracking
  backlinks_monitoring
}

enum PaymentStatus {
  pending
  completed
  failed
  refunded
  cancelled
}

enum AuditStatus {
  pending
  running
  completed
  failed
}

enum LinkType {
  follow
  nofollow
}

enum NotificationType {
  ranking_change
  audit_completed
  new_backlink
  competitor_alert
  subscription_expiring
  payment_failed
  usage_limit_reached
}

// Models
model User {
  id                String            @id @default(uuid()) @db.Uuid
  email             String            @unique
  password          String
  name              String
  role              UserRole          @default(user)
  avatarUrl         String?           @map("avatar_url")
  phone             String?
  timezone          String            @default("UTC")
  isActive          Boolean           @default(true) @map("is_active")
  emailVerified     Boolean           @default(false) @map("email_verified")
  emailVerifiedAt   DateTime?         @map("email_verified_at")
  lastLoginAt       DateTime?         @map("last_login_at")
  createdAt         DateTime          @default(now()) @map("created_at")
  updatedAt         DateTime          @default(now()) @updatedAt @map("updated_at")

  // Relations
  projects          Project[]
  subscriptions     UserSubscription[]
  usages            SubscriptionUsage[]
  payments          PaymentHistory[]
  notifications     Notification[]
  integrations      Integration[]
  aiRequests        AIRequest[]
  reports           Report[]
  
  // Content Management Relations
  content           Content[]
  contentCategories ContentCategory[]
  contentCalendarItems ContentCalendarItem[]
  contentTemplates  ContentTemplate[]
  contentComments   ContentComment[]
  contentApprovals  ContentApproval[]

  // AI Relations
  aiTemplates       AITemplate[]
  aiWorkflows       AIWorkflow[]
  aiUsageTracking   AIUsageTracking[]

  // Auth & Security Relations
  passwordResets    PasswordReset[]
  emailVerifications EmailVerification[]
  sessions          UserSession[]

  @@map("users")
}

model SubscriptionPlan {
  id           String            @id @default(uuid()) @db.Uuid
  name         String
  slug         String            @unique
  description  String?           @db.Text
  price        Decimal           @db.Decimal(10, 2)
  yearlyPrice  Decimal?          @map("yearly_price") @db.Decimal(10, 2)
  currency     String            @default("USD")
  features     Json?
  limits       Json?
  isActive     Boolean           @default(true) @map("is_active")
  sortOrder    Int               @default(0) @map("sort_order")
  createdAt    DateTime          @default(now()) @map("created_at")
  updatedAt    DateTime          @default(now()) @updatedAt @map("updated_at")

  // Relations
  subscriptions UserSubscription[]

  @@map("subscription_plans")
}

model UserSubscription {
  id                    String               @id @default(uuid()) @db.Uuid
  userId                String               @map("user_id") @db.Uuid
  planId                String               @map("plan_id") @db.Uuid
  status                SubscriptionStatus   @default(active)
  billingCycle          BillingCycle         @default(monthly) @map("billing_cycle")
  startedAt             DateTime             @map("started_at")
  expiresAt             DateTime?            @map("expires_at")
  trialEndsAt           DateTime?            @map("trial_ends_at")
  cancelledAt           DateTime?            @map("cancelled_at")
  paymentMethod         String?              @map("payment_method")
  stripeSubscriptionId  String?              @map("stripe_subscription_id")
  autoRenewal           Boolean              @default(true) @map("auto_renewal")
  createdAt             DateTime             @default(now()) @map("created_at")
  updatedAt             DateTime             @default(now()) @updatedAt @map("updated_at")

  // Relations
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan      SubscriptionPlan   @relation(fields: [planId], references: [id])
  usages    SubscriptionUsage[]
  payments  PaymentHistory[]

  @@map("user_subscriptions")
}

model SubscriptionUsage {
  id             String           @id @default(uuid()) @db.Uuid
  userId         String           @map("user_id") @db.Uuid
  subscriptionId String           @map("subscription_id") @db.Uuid
  usageType      UsageType        @map("usage_type")
  currentUsage   Int              @default(0) @map("current_usage")
  limitValue     Int              @map("limit_value")
  resetDate      DateTime?        @map("reset_date") @db.Date
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @default(now()) @updatedAt @map("updated_at")

  // Relations
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("subscription_usage")
}

model PaymentHistory {
  id                     String            @id @default(uuid()) @db.Uuid
  userId                 String            @map("user_id") @db.Uuid
  subscriptionId         String            @map("subscription_id") @db.Uuid
  amount                 Decimal           @db.Decimal(10, 2)
  currency               String            @default("USD")
  status                 PaymentStatus     @default(pending)
  paymentMethod          String?           @map("payment_method")
  stripePaymentIntentId  String?           @map("stripe_payment_intent_id")
  invoiceUrl             String?           @map("invoice_url")
  paidAt                 DateTime?         @map("paid_at")
  createdAt              DateTime          @default(now()) @map("created_at")

  // Relations
  user         User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription UserSubscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)

  @@map("payment_history")
}

model Project {
  id        String    @id @default(uuid()) @db.Uuid
  name      String
  domain    String
  ownerId   String    @map("owner_id") @db.Uuid
  settings  Json?
  isActive  Boolean   @default(true) @map("is_active")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  owner                User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  keywords             Keyword[]
  audits               Audit[]
  competitors          Competitor[]
  backlinks            Backlink[]
  integrations         Integration[]
  trafficData          TrafficData[]
  contentPerformance   ContentPerformance[]
  reports              Report[]
  contentCalendar      ContentCalendar[]
  aiRequests           AIRequest[]
  
  // Content Management Relations
  content              Content[]
  contentCategories    ContentCategory[]
  contentCalendarItems ContentCalendarItem[]
  contentTemplates     ContentTemplate[]

  // AI Relations
  aiTemplates          AITemplate[]
  aiWorkflows          AIWorkflow[]
  aiUsageTracking      AIUsageTracking[]

  @@map("projects")
}

model Keyword {
  id             String    @id @default(uuid()) @db.Uuid
  keyword        String
  projectId      String    @map("project_id") @db.Uuid
  targetUrl      String?   @map("target_url")
  searchVolume   Int?      @map("search_volume")
  difficulty     Float?
  cpc            Float?
  currentRanking Int       @default(0) @map("current_ranking")
  isTracking     Boolean   @default(true) @map("is_tracking")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  project  Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  rankings Ranking[]

  @@map("keywords")
}

model Ranking {
  id        String   @id @default(uuid()) @db.Uuid
  keywordId String   @map("keyword_id") @db.Uuid
  position  Int
  url       String?
  metadata  Json?
  date      DateTime @default(now())

  // Relations
  keyword Keyword @relation(fields: [keywordId], references: [id], onDelete: Cascade)

  @@map("rankings")
}

model Audit {
  id          String       @id @default(uuid()) @db.Uuid
  projectId   String       @map("project_id") @db.Uuid
  status      AuditStatus  @default(pending)
  results     Json?
  createdAt   DateTime     @default(now()) @map("created_at")
  completedAt DateTime?    @map("completed_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("audits")
}

model Competitor {
  id        String   @id @default(uuid()) @db.Uuid
  projectId String   @map("project_id") @db.Uuid
  domain    String
  name      String?
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("competitors")
}

model Backlink {
  id            String    @id @default(uuid()) @db.Uuid
  projectId     String    @map("project_id") @db.Uuid
  sourceDomain  String    @map("source_domain")
  targetUrl     String    @map("target_url")
  anchorText    String?   @map("anchor_text")
  linkType      LinkType? @map("link_type")
  authorityScore Int?     @map("authority_score")
  isActive      Boolean   @default(true) @map("is_active")
  discoveredAt  DateTime  @default(now()) @map("discovered_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("backlinks")
}

model Notification {
  id        String           @id @default(uuid()) @db.Uuid
  userId    String           @map("user_id") @db.Uuid
  type      NotificationType?
  title     String
  message   String?          @db.Text
  isRead    Boolean          @default(false) @map("is_read")
  createdAt DateTime         @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Integration models for third-party services
model Integration {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  projectId   String?   @map("project_id") @db.Uuid
  type        String    // 'gsc', 'ga', 'ahrefs', 'moz', 'semrush'
  config      Json
  credentials Json?
  isActive    Boolean   @default(true) @map("is_active")
  lastSync    DateTime? @map("last_sync")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("integrations")
}

// Traffic analytics data
model TrafficData {
  id                 String   @id @default(uuid()) @db.Uuid
  projectId          String   @map("project_id") @db.Uuid
  date               DateTime @db.Date
  page               String   @default("/")
  source             String   @default("direct")
  sessions           Int      @default(0)
  users              Int      @default(0)
  pageviews          Int      @default(0)
  clicks             Int      @default(0)
  impressions        Int      @default(0)
  ctr                Float    @default(0)
  position           Float    @default(0)
  query              String?
  bounceRate         Float?   @map("bounce_rate")
  avgSessionDuration Float?   @map("avg_session_duration")
  conversions        Int      @default(0)
  medium             String?
  createdAt          DateTime @default(now()) @map("created_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, source, date, page], name: "projectId_source_date_page")
  @@map("traffic_data")
}

// Content performance tracking
model ContentPerformance {
  id               String    @id @default(uuid()) @db.Uuid
  projectId        String    @map("project_id") @db.Uuid
  date             DateTime  @db.Date
  page             String
  url              String
  title            String?
  clicks           Int       @default(0)
  impressions      Int       @default(0)
  ctr              Float     @default(0)
  position         Float     @default(0)
  averagePosition  Float?    @map("average_position")
  wordCount        Int?      @map("word_count")
  lastUpdated      DateTime? @map("last_updated")
  organicTraffic   Int       @default(0) @map("organic_traffic")
  clickThroughRate Float?    @map("click_through_rate")
  timeOnPage       Int?      @map("time_on_page")
  bounceRate       Float?    @map("bounce_rate")
  socialShares     Int       @default(0) @map("social_shares")
  seoScore         Int?      @map("seo_score")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, date, page])
  @@map("content_performance")
}

// AI requests tracking
model AIRequest {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  projectId   String?   @map("project_id") @db.Uuid
  type        String    // 'keyword_research', 'content_optimization', etc.
  parameters  Json
  response    Json?
  status      String    @default("pending") // 'pending', 'processing', 'completed', 'failed'
  tokens      Int?      // Number of tokens used
  cost        Decimal?  // Cost incurred for this request
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("ai_requests")
}

model AITool {
  id              String      @id @default(uuid()) @db.Uuid
  name            String
  description     String
  category        String      // 'content', 'seo', 'analysis', 'research', 'optimization'
  icon            String
  isActive        Boolean     @default(true) @map("is_active")
  isPremium       Boolean     @default(false) @map("is_premium")
  usageCount      Int         @default(0) @map("usage_count")
  maxUsage        Int?        @map("max_usage")
  features        String[]    @default([])
  costPerRequest  Decimal?    @map("cost_per_request")
  averageTokens   Int?        @map("average_tokens")
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")

  // Relations
  templates     AITemplate[]
  workflowSteps AIWorkflowStep[]

  @@map("ai_tools")
}

model AITemplate {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @map("project_id") @db.Uuid
  toolId      String   @map("tool_id") @db.Uuid
  name        String
  description String
  parameters  Json
  isShared    Boolean  @default(false) @map("is_shared")
  createdBy   String   @map("created_by") @db.Uuid
  usageCount  Int      @default(0) @map("usage_count")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tool    AITool  @relation(fields: [toolId], references: [id], onDelete: Cascade)
  creator User    @relation(fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("ai_templates")
}

model AIWorkflow {
  id          String   @id @default(uuid()) @db.Uuid
  projectId   String   @map("project_id") @db.Uuid
  name        String
  description String
  isActive    Boolean  @default(true) @map("is_active")
  createdBy   String   @map("created_by") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  project Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  steps   AIWorkflowStep[]

  @@map("ai_workflows")
}

model AIWorkflowStep {
  id         String @id @default(uuid()) @db.Uuid
  workflowId String @map("workflow_id") @db.Uuid
  toolId     String @map("tool_id") @db.Uuid
  order      Int
  parameters Json
  dependsOn  String[] @default([]) @map("depends_on")

  // Relations
  workflow AIWorkflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  tool     AITool     @relation(fields: [toolId], references: [id], onDelete: Cascade)

  @@map("ai_workflow_steps")
}

model AIUsageTracking {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  projectId String?  @map("project_id") @db.Uuid
  toolId    String   @map("tool_id")
  requestId String   @map("request_id") @db.Uuid
  tokens    Int
  cost      Decimal
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("ai_usage_tracking")
}

// Custom reports
model Report {
  id          String    @id @default(uuid()) @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  projectId   String?   @map("project_id") @db.Uuid
  name        String
  type        String    // 'keyword_ranking', 'traffic_analysis', 'content_performance', etc.
  status      String    @default("pending") // 'pending', 'processing', 'completed', 'failed'
  config      Json      @default("{}")
  data        Json      @default("{}")
  schedule    Json?
  recipients  String[]  @default([])
  generatedAt DateTime? @map("generated_at")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// Content calendar for planning
model ContentCalendar {
  id             String    @id @default(uuid()) @db.Uuid
  projectId      String    @map("project_id") @db.Uuid
  title          String
  contentType    String    @map("content_type")
  status         String    @default("planned") // 'planned', 'draft', 'published', 'overdue'
  targetKeywords String[]  @map("target_keywords")
  assignee       String?
  plannedDate    DateTime? @map("planned_date")
  publishedDate  DateTime? @map("published_date")
  notes          String?   @db.Text
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("content_calendar")
}

// =============================
// CONTENT MANAGEMENT MODELS
// =============================

enum ContentStatus {
  draft
  published
  scheduled
  archived
}

enum ContentType {
  post
  page
  landing_page
  product
}

enum ContentPriority {
  high
  medium
  low
}

enum CalendarItemType {
  blog_post
  social_media
  email
  landing_page
  video
  infographic
}

enum CalendarItemStatus {
  planned
  in_progress
  review
  published
  archived
}

// Main content items
model Content {
  id              String        @id @default(uuid()) @db.Uuid
  title           String
  slug            String
  content         String        @db.Text
  excerpt         String?       @db.Text
  status          ContentStatus @default(draft)
  type            ContentType   @default(post)
  categories      String[]      @default([])
  tags            String[]      @default([])
  metaTitle       String?       @map("meta_title")
  metaDescription String?       @map("meta_description") @db.Text
  focusKeyword    String?       @map("focus_keyword")
  seoScore        Int?          @map("seo_score")
  readabilityScore Int?         @map("readability_score")
  publishedAt     DateTime?     @map("published_at")
  featuredImage   String?       @map("featured_image")
  wordCount       Int           @default(0) @map("word_count")
  readingTime     Int           @default(0) @map("reading_time")
  projectId       String        @map("project_id") @db.Uuid
  userId          String        @map("user_id") @db.Uuid
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at")

  // Relations
  project   Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  ContentComment[]
  approvals ContentApproval[]

  @@unique([projectId, slug])
  @@map("content")
}

// Content categories
model ContentCategory {
  id          String    @id @default(uuid()) @db.Uuid
  name        String
  slug        String
  description String?   @db.Text
  parentId    String?   @map("parent_id") @db.Uuid
  color       String?
  projectId   String    @map("project_id") @db.Uuid
  userId      String    @map("user_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")

  // Relations
  project  Project            @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user     User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent   ContentCategory?   @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children ContentCategory[]  @relation("CategoryHierarchy")

  @@unique([projectId, slug])
  @@map("content_categories")
}

// Content calendar items for planning
model ContentCalendarItem {
  id                   String              @id @default(uuid()) @db.Uuid
  title                String
  type                 CalendarItemType
  status               CalendarItemStatus  @default(planned)
  priority             ContentPriority     @default(medium)
  publishDate          DateTime            @map("publish_date")
  targetKeywords       String[]            @map("target_keywords") @default([])
  estimatedWordCount   Int?                @map("estimated_word_count")
  actualWordCount      Int?                @map("actual_word_count")
  brief                String              @db.Text
  notes                String?             @db.Text
  tags                 String[]            @default([])
  seoScore             Int?                @map("seo_score")
  readabilityScore     Int?                @map("readability_score")
  projectId            String              @map("project_id") @db.Uuid
  userId               String              @map("user_id") @db.Uuid
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @default(now()) @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("content_calendar_items")
}

// Content templates
model ContentTemplate {
  id              String  @id @default(uuid()) @db.Uuid
  name            String
  type            String  // 'blog-post', 'landing-page', 'email', 'social-media'
  template        String  @db.Text
  variables       Json    @default("[]")
  seoGuidelines   String[] @map("seo_guidelines") @default([])
  wordCountRange  Json?   @map("word_count_range")
  projectId       String  @map("project_id") @db.Uuid
  userId          String  @map("user_id") @db.Uuid
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("content_templates")
}

// Content comments for collaboration
model ContentComment {
  id        String   @id @default(uuid()) @db.Uuid
  contentId String   @map("content_id") @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  parentId  String?  @map("parent_id") @db.Uuid
  comment   String   @db.Text
  position  Json?    // { start: number, end: number }
  status    String   @default("open") // 'open', 'resolved'
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  content Content           @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user    User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent  ContentComment?   @relation("CommentReplies", fields: [parentId], references: [id])
  replies ContentComment[]  @relation("CommentReplies")

  @@map("content_comments")
}

// Content approval workflow
model ContentApproval {
  id            String   @id @default(uuid()) @db.Uuid
  contentId     String   @map("content_id") @db.Uuid
  userId        String   @map("user_id") @db.Uuid
  status        String   // 'pending', 'approved', 'rejected'
  feedback      String?  @db.Text
  approverNotes String?  @map("approver_notes") @db.Text
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")

  // Relations
  content Content @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("content_approvals")
}

// Password Reset and Email Verification Models
model PasswordReset {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("password_resets")
}

model EmailVerification {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @map("user_id") @db.Uuid
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  used      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("email_verifications")
}

model UserSession {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  sessionToken  String    @unique @map("session_token")
  deviceInfo    String?   @map("device_info")
  ipAddress     String?   @map("ip_address")
  location      String?
  userAgent     String?   @map("user_agent")
  isActive      Boolean   @default(true) @map("is_active")
  lastActive    DateTime  @default(now()) @map("last_active")
  expiresAt     DateTime  @map("expires_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}